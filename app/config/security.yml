parameters:
    security.acl.permission.map.class: Sonata\AdminBundle\Security\Acl\Permission\AdminPermissionMap

security:
    encoders:
        #Symfony\Component\Security\Core\User\User: plaintext
        AppBundle\Entity\User\User:
            algorithm: bcrypt
            encode_as_base64: false
            iterations: 1

    role_hierarchy:

        SONATA:
            # if you are not using acl then this line must be uncommented
#            - ROLE_SONATA_PAGE_ADMIN_PAGE_EDIT
#            - ROLE_SONATA_PAGE_ADMIN_BLOCK_EDIT

#        ROLE_SONATA_USER_GROUP_ADMIN:
#            - ROLE_SONATA_USER_ADMIN_GROUP_LIST
#            - ROLE_SONATA_USER_ADMIN_GROUP_VIEW
#            - ROLE_SONATA_USER_ADMIN_GROUP_CREATE
#            - ROLE_SONATA_USER_ADMIN_GROUP_EDIT
#            - ROLE_SONATA_USER_ADMIN_GROUP_DELETE
#            - ROLE_SONATA_USER_ADMIN_GROUP_EXPORT
#
        ROLE_AUDIT_LOGS_ADMIN:
            - ROLE_DATA_DOG_AUDIT_ADMIN_AUDIT_LOG_LIST
            - ROLE_DATA_DOG_AUDIT_ADMIN_AUDIT_LOG_VIEW

        # those are the roles for real use (less verbose)

        ROLE_USER:
            - ROLE_API
            - ROLE_SONATA_ADMIN

        ROLE_SONATA_ADMIN:
            - ROLE_SONATA_USER_ADMIN_USER_VIEW
            - ROLE_SONATA_USER_ADMIN_USER_EDIT

        ROLE_ADMIN:
            - ROLE_USER
#            - ROLE_SONATA_ADMIN
#            - ROLE_SONATA_USER_ADMIN_USER_LIST
#            - ROLE_SONATA_USER_ADMIN_USER_VIEW
#            - ROLE_SONATA_USER_ADMIN_USER_CREATE
#            - ROLE_SONATA_USER_ADMIN_USER_EDIT
            #- ROLE_SONATA_USER_ADMIN_USER_DELETE
            #- ROLE_SONATA_USER_ADMIN_USER_EXPORT
            - ROLE_AUDIT_LOGS_ADMIN

        ROLE_SUPER_ADMIN:
            # -it s not necessary indicate roles for ROLE_SUPER_ADMIN
            - ROLE_USER
            - ROLE_ADMIN
#            - ROLE_SONATA_ADMIN
#            - ROLE_SONATA_USER_USER_ADMIN
#            - ROLE_SONATA_USER_GROUP_ADMIN
            - ROLE_AUDIT_LOGS_ADMIN
            - ROLE_ALLOWED_TO_SWITCH
#            - ROLE_SONATA_PAGE_ADMIN_PAGE_EDIT
#            - ROLE_SONATA_PAGE_ADMIN_BLOCK_EDIT


    access_decision_manager:
        strategy: unanimous   

    providers:
        fos_userbundle:
            id: fos_user.user_provider.username

        #in_memory:
        #    memory:
        #        users:
        #            admin: { password: admin, roles: 'ROLE_ADMIN' }

    firewalls:
        # Disabling the security for the web debug toolbar, the profiler and Assetic.
        dev:
            pattern:  ^/(_(profiler|wdt)|css|images|js|admin/_(wdt|profiler)|api/_(wdt|profiler))/
            security: false

        # This firewall is used to handle the admin login area
        # This part is handled by the Sonata User Bundle
        admin:
            pattern:             /admin(.*)
            context:             user
            form_login:
                provider:        fos_userbundle
                login_path:      /admin/login
                use_forward:     false
                check_path:      /admin/login_check
                failure_path:    null
                #success_handler: authentication_handler
                #failure_handler: authentication_handler
            logout:
                path:           /admin/logout
            anonymous:    true

        #api_docs:
        #    pattern:   /api/doc(.*)
        #    http_basic:
        #        realm:         "API Login to System"
        #        provider:       fos_userbundle

        #    stateless: true

        api_docs:
            pattern: ^/api/_doc
            anonymous: true
            
        # login and api firewalls paths (/api/login_check and /api) must be configured to allow CORS requests.

        api_login:
            pattern:  ^/api/_login_check
            stateless: true
            anonymous: true
            form_login:
                check_path:               /api/_login_check
                require_previous_session: false
                username_parameter:       username
                password_parameter:       password
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure

        api_token_refresh:
            pattern:  ^/api/_token/refresh
            stateless: true
            anonymous: true

        api:
            pattern:   ^/api
            stateless: true
            lexik_jwt: ~

        # This firewall is used to handle the public login area
        # This part is handled by the FOS User Bundle
        main:
            pattern:      .*
            context:        user
            form_login:
                provider:       fos_userbundle
                csrf_token_generator: security.csrf.token_manager
                login_path:     /login
                use_forward:    false
                check_path:     /login_check
                failure_path:   null
            logout:
                path: /logout
                #handlers: ['sonata.page.cms_manager_selector']            
                # We set invalidate_session to false because we want basket
                # to be fully persisted even when user logout and login again
                invalidate_session: true
                #handlers: ['sonata.page.cms_manager_selector', 'sonata.basket.factory']
            anonymous:    true

            remember_me:
                secret: '%secret%'
                lifetime: 86400 # 1 day in seconds
                path: /
                # by default, the feature is enabled by checking a
                # checkbox in the login form (see below), uncomment the
                # following line to always enable it.
                #always_remember_me: true

    access_control:

        # Admin access
     
        - { path: ^/admin/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/logout$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/login-check$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/user/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        #- { path: ^/admin/, role: [ROLE_DASHBOARD_USER, IS_AUTHENTICATED_FULLY] }
        - { path: ^/admin/, role: [ROLE_USER, IS_AUTHENTICATED_FULLY] }

        # User Profile access

        - { path: ^/user/profile/, role: IS_AUTHENTICATED_FULLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }

        # Api access
   
        - { path: ^/api/_doc,   role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/_login, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/_token/refresh, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api.*,   roles: [IS_AUTHENTICATED_FULLY, ROLE_API] }
        
        # App access

        #- { path: ^/app/$, role: IS_AUTHENTICATED_ANONYMOUSLY }       
        #- { path: ^/app/, role: IS_AUTHENTICATED_FULLY }
        #- { path: ^/app/, role: IS_AUTHENTICATED_ANONYMOUSLY }

        # Public access

        - { path: ^/.*, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/, role: IS_AUTHENTICATED_ANONYMOUSLY }
